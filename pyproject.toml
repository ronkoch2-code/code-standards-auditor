[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "code-standards-auditor"
version = "1.0.0"
description = "AI-powered code auditing API for development pipelines"
authors = [
    {name = "AI Code Auditor", email = "auditor@codestandards.ai"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.3",
    "google-generativeai>=0.3.2",
    "neo4j>=5.16.0",
    "redis>=5.0.1",
    "celery>=5.3.4",
    "structlog>=24.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "black>=23.12.1",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "ipython>=8.19.0",
    "rich>=13.7.0",
]

docs = [
    "sphinx>=7.2.6",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.4",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/code-standards-auditor"
"Bug Tracker" = "https://github.com/yourusername/code-standards-auditor/issues"
"Documentation" = "https://code-standards-auditor.readthedocs.io"

[tool.setuptools.packages.find]
where = ["."]
include = ["api*", "core*", "services*", "utils*", "config*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "neo4j.*",
    "redis.*",
    "celery.*",
    "google.generativeai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--tb=short",
    "--cov=.",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "requires_api: Tests that require API keys",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/docs/*",
    "*/scripts/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E266", "E501", "W503"]
max-complexity = 10
select = ["B", "C", "E", "F", "W", "T4", "B9"]
exclude = [
    ".git",
    "__pycache__",
    "docs",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]

[tool.pylint.messages_control]
disable = [
    "C0330", "C0326",  # Bad formatting
    "C0116",  # Missing docstrings
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",# Unused argument
]

[tool.pylint.format]
max-line-length = 88

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]
