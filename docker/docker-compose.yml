version: '3.8'

services:
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: code-auditor-api
    ports:
      - "8000:8000"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=development
      - DEBUG=true
    volumes:
      - ../:/app
      - /Volumes/FS001/pythonscripts/standards:/standards
    depends_on:
      - neo4j
      - redis
    networks:
      - auditor-network
    restart: unless-stopped
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload

  neo4j:
    image: neo4j:5-community
    container_name: code-auditor-neo4j
    ports:
      - "7474:7474"  # Browser
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - auditor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "neo4j", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: code-auditor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auditor-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: code-auditor-celery-worker
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ../:/app
      - /Volumes/FS001/pythonscripts/standards:/standards
    depends_on:
      - redis
      - neo4j
    networks:
      - auditor-network
    restart: unless-stopped
    command: celery -A services.celery_app worker --loglevel=info

  celery-beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: code-auditor-celery-beat
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ../:/app
    depends_on:
      - redis
    networks:
      - auditor-network
    restart: unless-stopped
    command: celery -A services.celery_app beat --loglevel=info

  flower:
    image: mher/flower:latest
    container_name: code-auditor-flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_PORT=5555
    depends_on:
      - redis
      - celery-worker
    networks:
      - auditor-network
    restart: unless-stopped
    command: celery flower --broker=redis://redis:6379/1

networks:
  auditor-network:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
